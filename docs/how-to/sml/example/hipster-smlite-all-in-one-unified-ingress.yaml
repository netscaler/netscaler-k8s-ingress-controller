apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
spec:
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
    spec:
      containers:
      - env:
        - name: ENABLE_PROFILER
          value: '0'
        image: gcr.io/google-samples/microservices-demo/emailservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:8080
          periodSeconds: 5
        name: server
        ports:
        - containerPort: 8080
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:8080
          periodSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080
  selector:
    app: emailservice
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice
spec:
  ports:
  - name: grpc
    port: 5000
    targetPort: 5000
---
apiVersion: v1
kind: Endpoints
metadata:
  name: emailservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 5000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '5000'
    ingress.citrix.com/insecure-service-type: tcp
  name: emailservice-ingress
spec:
  defaultBackend:
    service:
      name: emailservice-app
      port:
        number: 5000
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '5050'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: productcatalogservice:3550
        - name: SHIPPING_SERVICE_ADDR
          value: shippingservice:50052
        - name: PAYMENT_SERVICE_ADDR
          value: paymentservice:50051
        - name: EMAIL_SERVICE_ADDR
          value: emailservice:5000
        - name: CURRENCY_SERVICE_ADDR
          value: currencyservice:7000
        - name: CART_SERVICE_ADDR
          value: cartservice:7070
        image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:5050
        name: server
        ports:
        - containerPort: 5050
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:5050
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
  selector:
    app: checkoutservice
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
spec:
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
apiVersion: v1
kind: Endpoints
metadata:
  name: checkoutservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 5050
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '5050'
    ingress.citrix.com/insecure-service-type: tcp
  name: checkoutservice-ingress
spec:
  defaultBackend:
    service:
      name: checkoutservice-headless
      port:
        number: 5050
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
spec:
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: productcatalogservice:3550
        - name: ENABLE_PROFILER
          value: '0'
        image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:8080
          periodSeconds: 5
        name: server
        ports:
        - containerPort: 8080
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:8080
          periodSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 450Mi
          requests:
            cpu: 100m
            memory: 220Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 8081
    targetPort: 8080
  selector:
    app: recommendationservice
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
spec:
  ports:
  - name: grpc
    port: 8081
    targetPort: 8081
---
apiVersion: v1
kind: Endpoints
metadata:
  name: recommendationservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 8081
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '8081'
    ingress.citrix.com/insecure-service-type: tcp
  name: recommendationservice-ingress
spec:
  defaultBackend:
    service:
      name: recommendationservice-headless
      port:
        number: 8081
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - env:
        - name: PORT
          value: '8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: productcatalogservice:3550
        - name: CURRENCY_SERVICE_ADDR
          value: currencyservice:7000
        - name: CART_SERVICE_ADDR
          value: cartservice:7070
        - name: RECOMMENDATION_SERVICE_ADDR
          value: recommendationservice:8081
        - name: SHIPPING_SERVICE_ADDR
          value: shippingservice:50052
        - name: CHECKOUT_SERVICE_ADDR
          value: checkoutservice:5050
        - name: AD_SERVICE_ADDR
          value: adservice:9555
        image: gcr.io/google-samples/microservices-demo/frontend:v0.1.2
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: Cookie
              value: shop_session-id=x-liveness-probe
            path: /_healthz
            port: 8080
          initialDelaySeconds: 10
        name: server
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Cookie
              value: shop_session-id=x-readiness-probe
            path: /_healthz
            port: 8080
          initialDelaySeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-headless
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: frontend
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-external-headless
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
spec:
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '50051'
        image: gcr.io/google-samples/microservices-demo/paymentservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
        name: server
        ports:
        - containerPort: 50051
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
  selector:
    app: paymentservice
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
spec:
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: v1
kind: Endpoints
metadata:
  name: paymentservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 50051
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '50051'
    ingress.citrix.com/insecure-service-type: tcp
  name: paymentservice-ingress
spec:
  defaultBackend:
    service:
      name: paymentservice-headless
      port:
        number: 50051
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
spec:
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '3550'
        image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:3550
        name: server
        ports:
        - containerPort: 3550
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:3550
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
  selector:
    app: productcatalogservice
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
spec:
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
---
apiVersion: v1
kind: Endpoints
metadata:
  name: productcatalogservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 3550
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '3550'
    ingress.citrix.com/insecure-service-type: tcp
  name: productcatalogservice-ingress
spec:
  defaultBackend:
    service:
      name: productcatalogservice-headless
      port:
        number: 3550
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      containers:
      - env:
        - name: REDIS_ADDR
          value: redis-cart:6379
        - name: PORT
          value: '7070'
        - name: LISTEN_ADDR
          value: 0.0.0.0
        image: gcr.io/google-samples/microservices-demo/cartservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:7070
            - -rpc-timeout=5s
          initialDelaySeconds: 15
          periodSeconds: 10
        name: server
        ports:
        - containerPort: 7070
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:7070
            - -rpc-timeout=5s
          initialDelaySeconds: 15
        resources:
          limits:
            cpu: 300m
            memory: 128Mi
          requests:
            cpu: 200m
            memory: 64Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070
  selector:
    app: cartservice
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070
---
apiVersion: v1
kind: Endpoints
metadata:
  name: cartservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 7070
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '7070'
    ingress.citrix.com/insecure-service-type: tcp
  name: cartservice-ingress
spec:
  defaultBackend:
    service:
      name: cartservice-headless
      port:
        number: 7070
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '7000'
        image: gcr.io/google-samples/microservices-demo/currencyservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:7000
        name: server
        ports:
        - containerPort: 7000
          name: grpc
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:7000
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
  selector:
    app: currencyservice
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
spec:
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
---
apiVersion: v1
kind: Endpoints
metadata:
  name: currencyservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 7000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '7000'
    ingress.citrix.com/insecure-service-type: tcp
  name: currencyservice-ingress
spec:
  defaultBackend:
    service:
      name: currencyservice-headless
      port:
        number: 7000
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '50051'
        image: gcr.io/google-samples/microservices-demo/shippingservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
        name: server
        ports:
        - containerPort: 50051
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
          periodSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 50052
    targetPort: 50051
  selector:
    app: shippingservice
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
spec:
  ports:
  - name: grpc
    port: 50052
    targetPort: 50052
---
apiVersion: v1
kind: Endpoints
metadata:
  name: shippingservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 50052
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '50052'
    ingress.citrix.com/insecure-service-type: tcp
  name: shippingservice-ingress
spec:
  defaultBackend:
    service:
      name: shippingservice-headless
      port:
        number: 50052
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      containers:
      - image: redis:alpine
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        name: redis
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        resources:
          limits:
            cpu: 125m
            memory: 256Mi
          requests:
            cpu: 70m
            memory: 200Mi
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart-headless
spec:
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    app: redis-cart
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
apiVersion: v1
kind: Endpoints
metadata:
  name: redis-cart
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: redis
    port: 6379
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '6379'
    ingress.citrix.com/insecure-service-type: tcp
  name: redis-cart-ingress
spec:
  defaultBackend:
    service:
      name: redis-cart-headless
      port:
        number: 6379
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
spec:
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
    spec:
      containers:
      - env:
        - name: PORT
          value: '9555'
        image: gcr.io/google-samples/microservices-demo/adservice:v0.1.2
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:9555
          initialDelaySeconds: 20
          periodSeconds: 15
        name: server
        ports:
        - containerPort: 9555
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:9555
          initialDelaySeconds: 20
          periodSeconds: 15
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 200m
            memory: 180Mi
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: adservice-headless
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555
  selector:
    app: adservice
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
spec:
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555
---
apiVersion: v1
kind: Endpoints
metadata:
  name: adservice
subsets:
- addresses:
  - ip: <citrix-adc-vpx-vip>
  ports:
  - name: grpc
    port: 9555
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
    ingress.citrix.com/insecure-port: '9555'
    ingress.citrix.com/insecure-service-type: tcp
  name: adservice-ingress
spec:
  defaultBackend:
    service:
      name: adservice-headless
      port:
        number: 9555
  ingressClassName: tier-1-vpx
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.citrix.com/frontend-ip: <citrix-adc-vpx-vip>
  name: tier-1-ingress
spec:
  ingressClassName: tier-1-vpx
  rules:
  - host: citrix.hipster.smlite
    http:
      paths:
      - backend:
          service:
            name: frontend-headless
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: tier-1-vpx
spec:
  controller: citrix.com/ingress-controller
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: cic-k8s-role
rules:
- apiGroups:
  - ''
  resources:
  - endpoints
  - pods
  - secrets
  - nodes
  - routes
  - namespaces
  - configmaps
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ''
  resources:
  - services/status
  verbs:
  - patch
- apiGroups:
  - ''
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - extensions
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - ingressclasses
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - citrix.com
  resources:
  - rewritepolicies
  - authpolicies
  - ratelimits
  - listeners
  - httproutes
  - continuousdeployments
  - apigatewaypolicies
  - wafs
  - bots
  - corspolicies
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups:
  - citrix.com
  resources:
  - rewritepolicies/status
  - continuousdeployments/status
  - authpolicies/status
  - ratelimits/status
  - listeners/status
  - httproutes/status
  - wafs/status
  - apigatewaypolicies/status
  - bots/status
  - corspolicies/status
  verbs:
  - patch
- apiGroups:
  - citrix.com
  resources:
  - vips
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - crd.projectcalico.org
  resources:
  - ipamblocks
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - config.openshift.io
  resources:
  - networks
  verbs:
  - get
  - list
- apiGroups:
  - network.openshift.io
  resources:
  - hostsubnets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cic-k8s-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cic-k8s-role
subjects:
- kind: ServiceAccount
  name: cic-k8s-role
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cic-k8s-role
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cic-k8s-ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cic-k8s-ingress-controller
  template:
    metadata:
      annotations: null
      labels:
        app: cic-k8s-ingress-controller
      name: cic-k8s-ingress-controller
    spec:
      containers:
      - args:
        - --ingress-classes tier-1-vpx
        env:
        - name: NS_IP
          value: <citrix-adc-vpx-nsip>
        - name: NS_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: <citrix-adc-vpx-credential-secret>
        - name: LOGLEVEL
          value: INFO
        - name: NS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: <citrix-adc-vpx-credential-secret>
        - name: EULA
          value: 'yes'
        image: quay.io/netscaler/netscaler-k8s-ingress-controller:1.39.6
        imagePullPolicy: Always
        name: cic-k8s-ingress-controller
      serviceAccountName: cic-k8s-role
---
